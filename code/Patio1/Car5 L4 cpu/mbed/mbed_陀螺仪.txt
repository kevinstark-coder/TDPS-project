
 
#include "mbed.h"
#include "platform/mbed_thread.h"
#include "BufferedSerial.h"
#include "stdio.h"
#include "MPU6050.h"

// Blinking rate in milliseconds
#define BLINKING_RATE_MS                                                    100

BufferedSerial async_port(D5,D4); //D5,D4两个
PwmOut left_en(D10);   //left
PwmOut right_en(A5);  //right
DigitalOut L1(D2);  //set as high
DigitalOut L2(D3);  //set as low
DigitalOut R1(D11);  //set as high
DigitalOut R2(D9);  //set as low

float sum = 0;
uint32_t sumCount = 0;
MPU6050 mpu6050;
Timer t;

     
int main()
{
    float dt = 0.01;
    i2c.frequency(400000);  // use fast (400 kHz) I2C     
    mpu6050.resetMPU6050(); // Reset registers to default in preparation for device calibration
    mpu6050.calibrateMPU6050(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers  
    mpu6050.initMPU6050();
    float angle=0;
    float angle1;
    float angleDiff;
    //Initialise the period and enable
    L1=1;
    L2=0;
    R1=1;
    R2=0;
    // Initialise the UART 
    async_port.set_format(8,BufferedSerial::None ,1);
    async_port.set_baud(19200);
    char buf[15] = {0};
    float left,right,pid_out;
    int usf,usr;
    // check if data ready interrupt
    mpu6050.readAccelData(accelCount);  // Read the x/y/z adc values
    mpu6050.getAres();
    
    // Now we'll calculate the accleration value into actual g's
    ax = (float)accelCount[0]*aRes - accelBias[0];  // get actual g value, this depends on scale being set
    ay = (float)accelCount[1]*aRes - accelBias[1];   
    az = (float)accelCount[2]*aRes - accelBias[2];  
   
    mpu6050.readGyroData(gyroCount);  // Read the x/y/z adc values
    mpu6050.getGres();
 
    // Calculate the gyro value into actual degrees per second
    gx = (float)gyroCount[0]*gRes; // - gyroBias[0];  // get actual gyro value, this depends on scale being set
    gy = (float)gyroCount[1]*gRes; // - gyroBias[1];  
    gz = (float)gyroCount[2]*gRes; // - gyroBias[2];   
    angle1=gz*8;
    while (1) {
        if(async_port.readable()==1)
        {   thread_sleep_for(2);
            async_port.read(buf,15);
                L1=1;  //set direction
                L2=0;
                R1=1;
                R2=0;
            //calculate duty cycle of left and right
            pid_out=float(int(buf[0])*2)-100;
            left=25+pid_out;
            right=25-pid_out;
            if(left>100)
                left=99;
            if(right>100)
                right=99;
            //obtain the distance from front and right
            usf=int(buf[1]);
            usr=int(buf[2]);
            //print the distance and the left right speed
            if (usf<25){
                break;
                }
            if (left<0){
                L1=0;
                L2=1;}
            if (right<0){
                R1=0;
                R2=1;}
            //printf("    ");
            //printf("%d",int(left));
            //printf("    ");
            //printf("%d",int(right));
            //printf("    ");
            //printf("%d",int(usf));
            //printf("    ");
            //printf("%d\n",int(usr));
            left_en.write(abs(left/100));
            right_en.write(abs(right/100));}}
            
            //write the speed into L298N
            //turn90degree 
            
            L1=1;
            L2=0;
            R1=0;
            R2=1;
            left_en.write(0.7);
            right_en.write(0.7);
            thread_sleep_for(1000);
            //cross the bridge
            
    while (1) {
        //L1=1;
        //L2=0;
        //R1=1;
        //R2=0;
        //left_en.write(0.7);
        //right_en.write(0.7);
        // check if data ready interrupt
        mpu6050.readAccelData(accelCount);  // Read the x/y/z adc values
        mpu6050.getAres();
    
        // Now we'll calculate the accleration value into actual g's
        ax = (float)accelCount[0]*aRes - accelBias[0];  // get actual g value, this depends on scale being set
        ay = (float)accelCount[1]*aRes - accelBias[1];   
        az = (float)accelCount[2]*aRes - accelBias[2];  
   
        mpu6050.readGyroData(gyroCount);  // Read the x/y/z adc values
        mpu6050.getGres();
 
        // Calculate the gyro value into actual degrees per second
        gx = (float)gyroCount[0]*gRes; // - gyroBias[0];  // get actual gyro value, this depends on scale being set
        gy = (float)gyroCount[1]*gRes; // - gyroBias[1];  
        gz = (float)gyroCount[2]*gRes; // - gyroBias[2];   
        angle+=dt*gz*8;
        angleDiff=angle-angle1;
        printf("angle1 = %d", int(angle1)); 
        printf(" angle = %d", int(angle)); 
        printf(" angleDiff = %d  deg\n\r", int(angleDiff)); 
        if(abs(angleDiff)<85){
            L1=1;
            L2=0;
            R1=1;
            R2=0;
            left_en.write(0.5);
            right_en.write(0.1);
            printf("40");
            printf("10");}
        if(abs(angleDiff)>95){
            L1=1;
            L2=0;
            R1=1;
            R2=0;
            left_en.write(0.1);
            right_en.write(0.5);
            printf("10");
            printf("40");}
            
        //int a=angle/10;
        /*switch(a){
                    case 0:  display=number_Zero;break;
                    case 1:  display=number_One;break;
                    case 2:  display=number_Two;break;
                    case 3:  display=number_Three;break;
                    case 4:  display=number_Four;break;
                    case 5:  display=number_Five;break;
                    case 6:  display=number_Six;break;
                    case 7:  display=number_Seven;break;
                    case 8:  display=number_Eight;break;
                    case 9:  display=number_Nine;break;
                    default: display=number_Zero;break;
             }*/
        //printf("gx = %f", gx); 
        //printf(" gy = %f", gy); 
        //printf(" gz = %f", gz); 
        //printf(" angle = %f  deg\n\r", angle); 
        thread_sleep_for(10);}
        
        //L1=1;
        //L2=0;
        //R1=0;
        //R2=1;
        //left_en.write(0.7);
        //right_en.write(0.7);
        //thread_sleep_for(1000);
        
//continue line tracking            
    while (1) {
        if(async_port.readable()==1)
        {   thread_sleep_for(2);
            async_port.read(buf,15);
                L1=1;  //set direction
                L2=0;
                R1=1;
                R2=0;
            //calculate duty cycle of left and right
            pid_out=float(int(buf[0])*2)-100;
            left=25+pid_out;
            right=25-pid_out;
            if(left>100)
                left=99;
            if(right>100)
                right=99;
            //obtain the distance from front and right
            usf=int(buf[1]);
            usr=int(buf[2]);
            //print the distance and the left right speed

            if (left<0){
                L1=0;
                L2=1;}
            if (right<0){
                R1=0;
                R2=1;}
            printf("    ");
            printf("%d",int(left));
            printf("    ");
            printf("%d",int(right));
            printf("    ");
            printf("%d",int(usf));
            printf("    ");
            printf("%d\n",int(usr));
            left_en.write(abs(left/100));
            right_en.write(abs(right/100));}}
            

            
}