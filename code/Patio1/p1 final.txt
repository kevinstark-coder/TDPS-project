/*
Project name: PATIO 2 CODE ON OPENMV
Authur: Qiankun Yang
Date: 2022.5.22
--------------------------------
In this p1, the robot will carry out following steps:
1.line tracking
2.bridge crossing
3.arc crossing
*/

#include "mbed.h"
#include "platform/mbed_thread.h"
#include "BufferedSerial.h"
#include "stdio.h"
#include "MPU6050.h"
// Blinking rate in milliseconds
#define BLINKING_RATE_MS                                                    100

float sum = 0;
uint32_t sumCount = 0;
MPU6050 mpu6050;
Timer t;

BufferedSerial async_port(D5,D4); //D5,D4两个
PwmOut left_en(D10);   //left
PwmOut right_en(A5);  //right
DigitalOut L1(D2);  //set as high
DigitalOut L2(D3);  //set as low
DigitalOut R1(D11);  //set as high
DigitalOut R2(D9);  //set as low

int main()
{   //Initialise the period and enable
    L1=1;
    L2=0;
    R1=1;
    R2=0;
    // Initialise the UART 
    async_port.set_format(8,BufferedSerial::None ,1);
    async_port.set_baud(19200);
    char buf[15] = {0};
    float left,right,pid_out;
    int usf,usr;
    while (1) {
        if(async_port.readable()==1)
        {   thread_sleep_for(2);
            async_port.read(buf,15);
                L1=1;  //set direction
                L2=0;
                R1=1;
                R2=0;
            //calculate duty cycle of left and right
            pid_out=float(int(buf[0])*2)-100;
            left=25+pid_out;
            right=25-pid_out;
            if(left>100)
                left=99;
            if(right>100)
                right=99;
            //obtain the distance from front and right
            usf=int(buf[1]);
            usr=int(buf[2]);
            //print the distance and the left right speed
            if (usf<10){
                break;
                }
            if (left<0){
                L1=0;
                L2=1;}
            if (right<0){
                R1=0;
                R2=1;}
            printf("    ");
            printf("%d",int(left));
            printf("    ");
            printf("%d",int(right));
            printf("    ");
            printf("%d",int(usf));
            printf("    ");
            printf("%d\n",int(usr));
            left_en.write(abs(left/100));
            right_en.write(abs(right/100));}}
            
            //write the speed into L298N
            //turn90degree 
            L1=1;
            L2=0;
            R1=0;
            R2=1;
            left_en.write(0.7);
            right_en.write(0.7);
            thread_sleep_for(1250);
            float dt = 0.002;
            //Set up I2C
            i2c.frequency(400000);  // use fast (400 kHz) I2C     
            mpu6050.resetMPU6050(); // Reset registers to default in preparation for device calibration
            mpu6050.calibrateMPU6050(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers  
            mpu6050.initMPU6050();
            float angle=0;
            //cross the bridge

//            int i=0;
//            while(1){
//            if(async_port.readable()==1){ 
//            thread_sleep_for(2);
//            async_port.read(buf,15);i++;}}//清理缓冲区
            
            
            
//            L1=1;        //过桥
//            L2=0;
//            R1=1;
//            R2=0;
//            left_en.write(0.6);
//            right_en.write(0.6);
//            thread_sleep_for(10000);
            

            printf("开始执行修正"); 
    while (1) {
            mpu6050.readGyroData(gyroCount);  // Read the x/y/z adc values
            mpu6050.getGres();
            // Calculate the gyro value into actual degrees per second
            gx = (float)gyroCount[0]*gRes; // - gyroBias[0];  // get actual gyro value, this depends on scale being set
            gy = (float)gyroCount[1]*gRes; // - gyroBias[1];  
            gz = (float)gyroCount[2]*gRes; // - gyroBias[2];   
            angle+=dt*gz*8;
            printf("angle = %d deg\n\r",int(angle));
            if(abs(angle)<=1){
                left_en.write(0.7);
                right_en.write(0.7);}
            if(angle<1){
                left_en.write(0.4);
                right_en.write(0.6);}
            if(angle>1){
                left_en.write(0.6);
                right_en.write(0.4);}
            printf("正在执行修正");
            
            if(async_port.readable()==1)
        {   
            printf("正在执行uart");
            async_port.read(buf,15);
            pid_out=float(int(buf[0])*2)-100;
            usf=int(buf[1]);
            usr=int(buf[2]);
            printf("第一个数据是");
            printf("%d",int(pid_out));
            printf("     前面是");
            printf("%d",usf);
            printf("     右边是");
            printf("%d\n",usr);
            if(usf>50){
                break;}
            }}
            //continue line tracking
            printf("开始第二次巡线");
            
            //左转90度
            
            L1=1;
            L2=0;
            R1=1;
            R2=0;
            left_en.write(0.7);
            right_en.write(0.7);
            thread_sleep_for(1000);
            
//    while (1) {
//        if(async_port.readable()==1)
//        {   thread_sleep_for(2);
//            async_port.read(buf,15);
//                L1=1;  //set direction
//                L2=0;
//                R1=1;
//                R2=0;
//            //calculate duty cycle of left and right
//            pid_out=float(int(buf[0])*2)-100;
//            left=25+pid_out;
//            right=25-pid_out;
//            if(left>100)
//                left=99;
//            if(right>100)
//                right=99;
//            //obtain the distance from front and right
//            usf=int(buf[1]);
//            usr=int(buf[2]);
//            //print the distance and the left right speed
//
//            if (left<0){
//                L1=0;
//                L2=1;}
//            if (right<0){
//                R1=0;
//                R2=1;}
//            printf("    ");
//            printf("%d",int(left));
//            printf("    ");
//            printf("%d",int(right));
//            printf("    ");
//            printf("%d",int(usf));
//            printf("    ");
//            printf("%d\n",int(usr));
//            left_en.write(abs(left/100));
//            right_en.write(abs(right/100));}}
            

            
}